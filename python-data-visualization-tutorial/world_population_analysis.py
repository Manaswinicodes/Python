# Python Data Visualization Tutorial - World Population Analysis
# Following the structure from the Matplotlib & Pandas tutorial

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Set style for better looking plots
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

print("üåç WORLD POPULATION DATA VISUALIZATION TUTORIAL")
print("=" * 60)
print("Following the structure from Python Plotting Tutorial w/ Matplotlib & Pandas")
print("Dataset: World Population by Country (1960-2022)")
print()

# ============================================================================
# 1. LOAD NECESSARY LIBRARIES & CREATE SAMPLE DATA
# ============================================================================

# Create a comprehensive world population dataset
def create_world_population_data():
    """Create a realistic world population dataset"""
    
    # Major countries data
    countries = [
        'China', 'India', 'United States', 'Indonesia', 'Pakistan',
        'Brazil', 'Nigeria', 'Bangladesh', 'Russia', 'Mexico',
        'Japan', 'Ethiopia', 'Philippines', 'Egypt', 'Vietnam',
        'Turkey', 'Iran', 'Germany', 'Thailand', 'United Kingdom'
    ]
    
    # Continents mapping
    continent_map = {
        'China': 'Asia', 'India': 'Asia', 'United States': 'North America',
        'Indonesia': 'Asia', 'Pakistan': 'Asia', 'Brazil': 'South America',
        'Nigeria': 'Africa', 'Bangladesh': 'Asia', 'Russia': 'Europe',
        'Mexico': 'North America', 'Japan': 'Asia', 'Ethiopia': 'Africa',
        'Philippines': 'Asia', 'Egypt': 'Africa', 'Vietnam': 'Asia',
        'Turkey': 'Europe', 'Iran': 'Asia', 'Germany': 'Europe',
        'Thailand': 'Asia', 'United Kingdom': 'Europe'
    }
    
    # Base populations (in millions, approximate 2022 values)
    base_populations = {
        'China': 1412, 'India': 1380, 'United States': 331, 'Indonesia': 274,
        'Pakistan': 225, 'Brazil': 215, 'Nigeria': 218, 'Bangladesh': 165,
        'Russia': 146, 'Mexico': 130, 'Japan': 125, 'Ethiopia': 118,
        'Philippines': 110, 'Egypt': 104, 'Vietnam': 98, 'Turkey': 85,
        'Iran': 84, 'Germany': 83, 'Thailand': 70, 'United Kingdom': 67
    }
    
    # Create time series data (1960-2022)
    years = list(range(1960, 2023))
    data = []
    
    for country in countries:
        base_pop = base_populations[country]
        continent = continent_map[country]
        
        # Generate realistic population growth over time
        for i, year in enumerate(years):
            # Different growth patterns for different countries
            if country in ['China', 'India']:
                # High growth, then slowing
                growth_rate = 0.02 - (i * 0.0003)
            elif country in ['Germany', 'Japan', 'Russia']:
                # Low/negative growth
                growth_rate = 0.001 - (i * 0.00002)
            elif country in ['Nigeria', 'Ethiopia', 'Pakistan']:
                # High sustained growth
                growth_rate = 0.025 - (i * 0.0001)
            else:
                # Moderate growth
                growth_rate = 0.015 - (i * 0.0002)
            
            # Calculate population for this year
            years_from_2022 = 2022 - year
            population = base_pop * ((1 + growth_rate) ** (-years_from_2022))
            
            # Add some random variation
            population *= (1 + np.random.normal(0, 0.02))
            
            data.append({
                'Year': year,
                'Country': country,
                'Continent': continent,
                'Population': max(population, 1)  # Ensure positive population
            })
    
    return pd.DataFrame(data)

# Generate the dataset
print("üìä Generating World Population Dataset...")
df = create_world_population_data()
print(f"‚úÖ Dataset created: {len(df)} records across {df['Country'].nunique()} countries")
print(f"üìÖ Time period: {df['Year'].min()} - {df['Year'].max()}")
print()

# Display basic information about the dataset
print("üîç DATASET OVERVIEW")
print("-" * 30)
print(df.head(10))
print()
print("üìà Dataset Info:")
print(f"Shape: {df.shape}")
print(f"Countries: {df['Country'].nunique()}")
print(f"Continents: {df['Continent'].nunique()}")
print(f"Year range: {df['Year'].min()} - {df['Year'].max()}")
print()

# ============================================================================
# 2. LINE GRAPH EXAMPLE - Population Growth Over Time
# ============================================================================

print("üìà 1. LINE GRAPH - Population Growth Over Time")
print("-" * 50)

# Create line graph showing population growth for top 5 countries
plt.figure(figsize=(14, 8))

# Get top 5 most populous countries in 2022
top_countries = df[df['Year'] == 2022].nlargest(5, 'Population')['Country'].tolist()

for country in top_countries:
    country_data = df[df['Country'] == country].sort_values('Year')
    plt.plot(country_data['Year'], country_data['Population'], 
             marker='o', linewidth=2.5, markersize=4, label=country)

plt.title('Population Growth Over Time - Top 5 Countries', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('Year', fontsize=12, fontweight='bold')
plt.ylabel('Population (Millions)', fontsize=12, fontweight='bold')
plt.legend(fontsize=11, loc='upper left')
plt.grid(True, alpha=0.3)
plt.tight_layout()

# Customize the plot
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['right'].set_visible(False)
plt.xticks(range(1960, 2025, 10))
plt.show()

print("‚úÖ Line graph shows population trends for the 5 most populous countries")
print("   - China and India show dramatic growth")
print("   - Clear visualization of growth patterns over 60+ years")
print()

# ============================================================================
# 3. HISTOGRAM EXAMPLE - Population Distribution in 2022
# ============================================================================

print("üìä 2. HISTOGRAM - Current Population Distribution")
print("-" * 50)

# Create histogram of population distribution
plt.figure(figsize=(12, 6))

# Get 2022 population data
pop_2022 = df[df['Year'] == 2022]['Population'].values

plt.hist(pop_2022, bins=15, color='skyblue', alpha=0.7, edgecolor='black', linewidth=1.2)
plt.title('Distribution of Country Populations (2022)', fontsize=16, fontweight='bold', pad=20)
plt.xlabel('Population (Millions)', fontsize=12, fontweight='bold')
plt.ylabel('Number of Countries', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3, axis='y')

# Add statistics
mean_pop = np.mean(pop_2022)
median_pop = np.median(pop_2022)
plt.axvline(mean_pop, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean_pop:.1f}M')
plt.axvline(median_pop, color='orange', linestyle='--', linewidth=2, label=f'Median: {median_pop:.1f}M')
plt.legend()

plt.tight_layout()
plt.show()

print("‚úÖ Histogram reveals population distribution patterns:")
print(f"   - Most countries have populations under {median_pop:.0f} million")
print(f"   - Few countries (China, India) have extremely large populations")
print(f"   - Average population: {mean_pop:.1f} million")
print()

# ============================================================================
# 4. PIE CHART #1 - Population by Continent (2022)
# ============================================================================

print("ü•ß 3. PIE CHART #1 - Population Distribution by Continent")
print("-" * 55)

# Calculate total population by continent in 2022
continent_pop = df[df['Year'] == 2022].groupby('Continent')['Population'].sum().sort_values(ascending=False)

plt.figure(figsize=(10, 8))
colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FF99CC']
wedges, texts, autotexts = plt.pie(continent_pop.values, 
                                  labels=continent_pop.index,
                                  autopct='%1.1f%%',
                                  startangle=90,
                                  colors=colors,
                                  explode=[0.05 if x == continent_pop.max() else 0 for x in continent_pop.values])

plt.title('World Population by Continent (2022)', fontsize=16, fontweight='bold', pad=20)

# Enhance text appearance
for text in texts:
    text.set_fontsize(11)
    text.set_fontweight('bold')
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontsize(10)
    autotext.set_fontweight('bold')

plt.axis('equal')
plt.tight_layout()
plt.show()

print("‚úÖ Pie chart shows continental population distribution:")
for continent, population in continent_pop.items():
    percentage = (population / continent_pop.sum()) * 100
    print(f"   - {continent}: {population:.0f}M people ({percentage:.1f}%)")
print()

# ============================================================================
# 5. PIE CHART #2 - Advanced Pandas Example (Growth Rate Categories)
# ============================================================================

print("ü•ß 4. PIE CHART #2 - Countries by Population Growth Rate")
print("-" * 55)

# Calculate growth rates between 1960 and 2022
growth_data = []
for country in df['Country'].unique():
    country_df = df[df['Country'] == country]
    pop_1960 = country_df[country_df['Year'] == 1960]['Population'].iloc[0]
    pop_2022 = country_df[country_df['Year'] == 2022]['Population'].iloc[0]
    
    # Calculate compound annual growth rate
    years = 2022 - 1960
    growth_rate = ((pop_2022 / pop_1960) ** (1/years) - 1) * 100
    
    growth_data.append({
        'Country': country,
        'Growth_Rate': growth_rate
    })

growth_df = pd.DataFrame(growth_data)

# Categorize growth rates
def categorize_growth(rate):
    if rate < 1:
        return 'Low Growth (<1%)'
    elif rate < 2:
        return 'Moderate Growth (1-2%)'
    elif rate < 3:
        return 'High Growth (2-3%)'
    else:
        return 'Very High Growth (>3%)'

growth_df['Growth_Category'] = growth_df['Growth_Rate'].apply(categorize_growth)
growth_categories = growth_df['Growth_Category'].value_counts()

plt.figure(figsize=(10, 8))
colors = ['#FFB6C1', '#87CEEB', '#98FB98', '#F0E68C']
wedges, texts, autotexts = plt.pie(growth_categories.values,
                                  labels=growth_categories.index,
                                  autopct='%1.1f%%',
                                  startangle=45,
                                  colors=colors)

plt.title('Countries by Population Growth Rate Categories\n(1960-2022 Annual Average)', 
          fontsize=14, fontweight='bold', pad=20)

for text in texts:
    text.set_fontsize(10)
for autotext in autotexts:
    autotext.set_color('white')
    autotext.set_fontweight('bold')

plt.axis('equal')
plt.tight_layout()
plt.show()

print("‚úÖ Advanced pie chart using Pandas operations:")
for category, count in growth_categories.items():
    print(f"   - {category}: {count} countries")
print()

# ============================================================================
# 6. BOX & WHISKER PLOT - Comparing Population Growth by Continent
# ============================================================================

print("üì¶ 5. BOX & WHISKER PLOT - Population Growth by Continent")
print("-" * 60)

# Merge growth data with continent information
growth_with_continent = growth_df.merge(
    df[['Country', 'Continent']].drop_duplicates(), 
    on='Country'
)

plt.figure(figsize=(12, 8))
box_plot = plt.boxplot([growth_with_continent[growth_with_continent['Continent'] == continent]['Growth_Rate'].values 
                       for continent in growth_with_continent['Continent'].unique()],
                      labels=growth_with_continent['Continent'].unique(),
                      patch_artist=True,
                      notch=True)

# Customize box plot colors
colors = ['lightblue', 'lightgreen', 'lightcoral', 'lightyellow', 'lightpink']
for patch, color in zip(box_plot['boxes'], colors):
    patch.set_facecolor(color)
    patch.set_alpha(0.7)

plt.title('Population Growth Rate Distribution by Continent\n(1960-2022 Annual Average)', 
          fontsize=14, fontweight='bold', pad=20)
plt.xlabel('Continent', fontsize=12, fontweight='bold')
plt.ylabel('Annual Growth Rate (%)', fontsize=12, fontweight='bold')
plt.grid(True, alpha=0.3, axis='y')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

print("‚úÖ Box plot reveals growth rate patterns by continent:")
for continent in growth_with_continent['Continent'].unique():
    continent_rates = growth_with_continent[growth_with_continent['Continent'] == continent]['Growth_Rate']
    print(f"   - {continent}: Median {continent_rates.median():.2f}%, Range {continent_rates.min():.2f}%-{continent_rates.max():.2f}%")
print()

# ============================================================================
# 7. BONUS: ADVANCED VISUALIZATIONS
# ============================================================================

print("üéØ 6. BONUS VISUALIZATIONS")
print("-" * 30)

# Create a subplot with multiple visualizations
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))

# 1. Population evolution for all continents
continent_yearly = df.groupby(['Year', 'Continent'])['Population'].sum().reset_index()
for continent in continent_yearly['Continent'].unique():
    continent_data = continent_yearly[continent_yearly['Continent'] == continent]
    ax1.plot(continent_data['Year'], continent_data['Population'], 
             marker='o', label=continent, linewidth=2)
ax1.set_title('Population Evolution by Continent', fontweight='bold')
ax1.set_xlabel('Year')
ax1.set_ylabel('Population (Millions)')
ax1.legend()
ax1.grid(True, alpha=0.3)

# 2. Top 10 countries scatter plot (Population vs Growth Rate)
top_10_2022 = df[df['Year'] == 2022].nlargest(10, 'Population')
top_10_growth = growth_df[growth_df['Country'].isin(top_10_2022['Country'])]
merged_top_10 = top_10_2022.merge(top_10_growth, on='Country')

ax2.scatter(merged_top_10['Population'], merged_top_10['Growth_Rate'], 
           s=100, alpha=0.7, c=range(len(merged_top_10)), cmap='viridis')
ax2.set_title('Population vs Growth Rate (Top 10 Countries)', fontweight='bold')
ax2.set_xlabel('Population 2022 (Millions)')
ax2.set_ylabel('Growth Rate (%)')
ax2.grid(True, alpha=0.3)

# Add country labels
for i, row in merged_top_10.iterrows():
    ax2.annotate(row['Country'], (row['Population'], row['Growth_Rate']), 
                xytext=(5, 5), textcoords='offset points', fontsize=8)

# 3. Stacked area chart of continental populations
continent_pivot = continent_yearly.pivot(index='Year', columns='Continent', values='Population')
ax3.stackplot(continent_pivot.index, *[continent_pivot[col] for col in continent_pivot.columns],
             labels=continent_pivot.columns, alpha=0.8)
ax3.set_title('Stacked Continental Population Growth', fontweight='bold')
ax3.set_xlabel('Year')
ax3.set_ylabel('Population (Millions)')
ax3.legend(loc='upper left', fontsize=8)

# 4. Heatmap of population growth by decade and continent
decades = [1960, 1970, 1980, 1990, 2000, 2010, 2020]
heatmap_data = []

for decade in decades:
    decade_data = df[df['Year'] == decade].groupby('Continent')['Population'].sum()
    heatmap_data.append(decade_data.values)

heatmap_df = pd.DataFrame(heatmap_data, 
                         index=decades, 
                         columns=df['Continent'].unique())

im = ax4.imshow(heatmap_df.T, cmap='YlOrRd', aspect='auto')
ax4.set_title('Population Heatmap by Decade', fontweight='bold')
ax4.set_xlabel('Decade')
ax4.set_ylabel('Continent')
ax4.set_xticks(range(len(decades)))
ax4.set_xticklabels(decades, rotation=45)
ax4.set_yticks(range(len(heatmap_df.columns)))
ax4.set_yticklabels(heatmap_df.columns)

# Add colorbar
plt.colorbar(im, ax=ax4, label='Population (Millions)')

plt.tight_layout()
plt.show()

print("‚úÖ Advanced visualizations completed!")
print()

# ============================================================================
# 8. DATA SUMMARY AND INSIGHTS
# ============================================================================

print("üìã FINAL DATA SUMMARY & INSIGHTS")
print("=" * 40)

# Key statistics
total_population_2022 = df[df['Year'] == 2022]['Population'].sum()
total_population_1960 = df[df['Year'] == 1960]['Population'].sum()
overall_growth = ((total_population_2022 / total_population_1960) ** (1/62) - 1) * 100

print(f"üåç World Population (Top 20 countries):")
print(f"   - 1960: {total_population_1960:.0f} million")
print(f"   - 2022: {total_population_2022:.0f} million")
print(f"   - Overall growth rate: {overall_growth:.2f}% annually")
print()

print("üèÜ Top 5 Most Populous Countries (2022):")
top_5 = df[df['Year'] == 2022].nlargest(5, 'Population')
for i, (_, row) in enumerate(top_5.iterrows(), 1):
    print(f"   {i}. {row['Country']}: {row['Population']:.0f} million ({row['Continent']})")
print()

print("üìà Fastest Growing Countries (1960-2022):")
fastest_growing = growth_df.nlargest(5, 'Growth_Rate')
for i, (_, row) in enumerate(fastest_growing.iterrows(), 1):
    print(f"   {i}. {row['Country']}: {row['Growth_Rate']:.2f}% annually")
print()

print("üéØ KEY INSIGHTS FROM VISUALIZATIONS:")
print("   1. Line Graph: Shows clear population trajectories and growth patterns")
print("   2. Histogram: Reveals most countries have moderate populations (<200M)")
print("   3. Pie Charts: Asia dominates global population, varied growth rates")
print("   4. Box Plot: African countries show highest growth rate variability")
print("   5. Advanced Plots: Continental trends and population dynamics over time")
print()

print("üõ†Ô∏è  TECHNICAL IMPLEMENTATION:")
print("   ‚úÖ Pandas for data manipulation and analysis")
print("   ‚úÖ Matplotlib for all chart types (line, histogram, pie, box)")
print("   ‚úÖ Custom styling and professional formatting")
print("   ‚úÖ Statistical calculations and data insights")
print("   ‚úÖ Multiple visualization techniques in one comprehensive analysis")
print()

print("üéâ DATA VISUALIZATION TUTORIAL COMPLETE!")
print("   This tutorial demonstrates all key concepts from the original")
print("   Matplotlib & Pandas video using real-world population data.")
