# GitHub Repository Setup Guide

Follow these steps to create and set up your house price prediction repository on GitHub.

## Step 1: Create Local Repository Structure

Create the following directory structure on your local machine:

```
house-price-prediction/
├── .github/
│   └── workflows/
│       └── ci.yml
├── data/
│   └── .gitkeep
├── src/
│   ├── __init__.py
│   └── preprocessing.py
├── notebooks/
│   └── .gitkeep
├── outputs/
│   └── .gitkeep
├── tests/
│   └── __init__.py
├── .gitignore
├── LICENSE
├── README.md
├── requirements.txt
└── setup.py
```

## Step 2: Create Files

### 2.1 Create empty __init__.py files:
```bash
touch src/__init__.py
touch tests/__init__.py
```

### 2.2 Create .gitkeep files for empty directories:
```bash
touch data/.gitkeep
touch notebooks/.gitkeep
touch outputs/.gitkeep
```

### 2.3 Add your main preprocessing code:
- Copy the preprocessing code from our previous artifact into `src/preprocessing.py`

## Step 3: Initialize Git Repository

```bash
# Navigate to your project directory
cd house-price-prediction

# Initialize git repository
git init

# Add all files
git add .

# Create initial commit
git commit -m "Initial commit: House price prediction project setup"
```

## Step 4: Create GitHub Repository

### Option A: Using GitHub CLI (Recommended)
```bash
# Install GitHub CLI if not already installed
# macOS: brew install gh
# Windows: winget install GitHub.CLI
# Linux: See https://github.com/cli/cli#installation

# Login to GitHub
gh auth login

# Create repository
gh repo create house-price-prediction --public --description "Advanced house price prediction using machine learning"

# Push to GitHub
git remote add origin https://github.com/yourusername/house-price-prediction.git
git branch -M main
git push -u origin main
```

### Option B: Using GitHub Web Interface
1. Go to [github.com](https://github.com)
2. Click "New repository"
3. Repository name: `house-price-prediction`
4. Description: "Advanced house price prediction using machine learning"
5. Choose Public/Private
6. **Don't** initialize with README (we already have one)
7. Click "Create repository"
8. Follow the instructions to push existing repository:

```bash
git remote add origin https://github.com/yourusername/house-price-prediction.git
git branch -M main
git push -u origin main
```

## Step 5: Set Up Repository Features

### 5.1 Enable GitHub Actions
- Go to your repository on GitHub
- Click "Actions" tab
- GitHub will automatically detect the workflow file
- The CI/CD pipeline will run on every push

### 5.2 Add Repository Topics
- Go to repository settings
- Add topics: `machine-learning`, `kaggle`, `house-prices`, `regression`, `data-science`, `python`

### 5.3 Create Branch Protection Rules (Optional)
- Go to Settings → Branches
- Add rule for `main` branch
- Enable "Require status checks to pass before merging"
- Enable "Require pull request reviews before merging"

## Step 6: Add Dataset

### 6.1 Download Kaggle Dataset
1. Go to [Kaggle Competition](https://www.kaggle.com/competitions/house-prices-advanced-regression-techniques/data)
2. Download `train.csv` and `test.csv`
3. Place them in the `data/` directory

### Note: Don't commit large data files to Git
The `.gitignore` file is configured to exclude CSV files from version control.

## Step 7: Create Development Environment

```bash
# Create virtual environment
python -m venv venv

# Activate virtual environment
# On macOS/Linux:
source venv/bin/activate
# On Windows:
venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt

# Install package in development mode
pip install -e .
```

## Step 8: Test Your Setup

```bash
# Run the preprocessing pipeline
python src/preprocessing.py

# Run tests (when you create them)
pytest tests/

# Check code formatting
black src/
flake8 src/
isort src/
```

## Step 9: Create Additional Documentation

### 9.1 Create CONTRIBUTING.md
```markdown
# Contributing to House Price Prediction

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Ensure all tests pass
6. Submit a pull request
```

### 9.2 Create CHANGELOG.md
```markdown
# Changelog

## [1.0.0] - 2025-06-22
### Added
- Initial release
- Complete preprocessing pipeline
- Multiple regression models
- Feature engineering capabilities
```

## Step 10: Repository Maintenance

### Regular Tasks:
- **Update dependencies**: `pip-review --auto`
- **Run tests**: `pytest`
- **Check security**: `safety check`
- **Update documentation**: Keep README current

### Git Workflow:
```bash
# Create feature branch
git checkout -b feature/new-model

# Make changes and commit
git add .
git commit -m "Add XGBoost model implementation"

# Push and create pull request
git push origin feature/new-model
# Then create PR on GitHub
```

## Troubleshooting

### Common Issues:

1. **Large file error**: Ensure CSV files are in `.gitignore`
2. **Authentication error**: Run `gh auth login` or check SSH keys
3. **Workflow failures**: Check Python version compatibility
4. **Import errors**: Ensure virtual environment is activated

### Getting Help:
- Check GitHub's documentation
- Review workflow logs in Actions tab
- Create issues for bugs or feature requests

## Next Steps

1. **Add more models**: XGBoost, LightGBM, Neural Networks
2. **Create notebooks**: Jupyter notebooks for exploration
3. **Add tests**: Unit tests for preprocessing functions
4. **Documentation**: Sphinx documentation
5. **Docker**: Containerize the application
6. **API**: Create Flask/FastAPI endpoint

Your repository is now ready for collaborative development and deployment!
